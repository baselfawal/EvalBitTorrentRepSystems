
package trust_system_lib;

import core_lib.*;

/**
 * The TnaSlTM class conforms to the TrustAlg interface and implements the
 * 'Trust Network Analysis with Subjective Logic' approach of Josang et. al.
 */
public class TnaSlTM implements TrustAlg{
	
	// ************************** PRIVATE FIELDS *****************************

	/**
	 *  The Network which this TnaSlTM is managing.
	 */
	private Network nw;
	
	/**
	 *  Scratch space vector storing max values seen during multiplication.
	 */
	private double[] max_vec;
	
	/**
	 * Scratch space vector for multiplication purposes.
	 */
	private Opinion[] vectorA;
	
	/**
	 * Scratch space vector for multiplication purposes.
	 */
	private Opinion[] vectorB;
	
	/**
	 * Scratch space vector for multiplication purposes.
	 */
	private Opinion[] vectorC;
	
	/**
	 * Matrix storing persistent Opinion objects for each relation.
	 */
	private Opinion[][] op_stor;
	
	// *************************** CONSTRUCTORS ******************************

	/**
	 * Construct a TnaSlTM object
	 * @param nw Network which this TnaSlTM will be managing
	 */
	public TnaSlTM(Network nw){
		this.nw = nw;
		this.max_vec = new double[nw.GLOBALS.NUM_USERS];
		this.vectorA = new Opinion[nw.GLOBALS.NUM_USERS];
		this.vectorB = new Opinion[nw.GLOBALS.NUM_USERS];
		this.vectorC = new Opinion[nw.GLOBALS.NUM_USERS];
		this.op_stor = new Opinion[nw.GLOBALS.NUM_USERS][nw.GLOBALS.NUM_USERS];

		for(int i=0; i < nw.GLOBALS.NUM_USERS; i++){
			for(int j=0; j < nw.GLOBALS.NUM_USERS; j++){
				if(nw.getUser(i).isPreTrusted())
					op_stor[i][j] = new Opinion(0.0, 0.0, 1.0, 1.0);
				else
					op_stor[i][j] = new Opinion(0.0, 0.0, 1.0, 0.5);
			} // Initialize persistent Opinion values
		} // Do so for every relation in the network
	}

	// ************************** PUBLIC METHODS *****************************
	
	/**
	 * Interfaced: Text name of this trust algorithm (spaces are okay).
	 */
	public String algName(){
		return "TNA-SL";
	}
	
	/**
	 * Interfaced: File extension placed on output files using this algorithm.
	 */
	public String fileExtension(){
		return "tnasl";
	}
	
	/**
	 * Interfaced: Given coordinates of a feedback commitment, update as needed.
	 */
	public void update(Transaction trans){
		int new_row = trans.getRecv();
		int new_vec = trans.getSend();
		int pos_fbacks = nw.getUserRelation(new_vec, new_row).getPos();
		int neg_fbacks = nw.getUserRelation(new_vec, new_row).getNeg();
		op_stor[new_row][new_vec].edit(pos_fbacks, neg_fbacks);	
	}
	
	/**
	 * Interfaced: Compute trust, exporting trust values to Network.
	 */
	public void computeTrust(int user, int cycle){
		
		for(int i=0; i < nw.GLOBALS.NUM_USERS; i++){
			max_vec[i] = op_stor[i][user].expectedValue();
			vectorA[i] = op_stor[i][user];
		} // Initialize the 'max value' vector for this run

		vectorB = TNASLMultiply(vectorA, op_stor);
		while(vectorB != null){
			vectorC = TNASLMultiply(vectorB, op_stor);
			if(vectorC == null)
				break;
			vectorB = TNASLMultiply(vectorC, op_stor);
		} // Multiply until 'max_vector' is saturated
		
		for(int i=0; i < nw.GLOBALS.NUM_USERS; i++){
			nw.getUserRelation(user, i).setTrust(max_vec[i]);
		} // Export Opinion expected values's as trust values
		
	}
	
	// ************************** PRIVATE METHODS ****************************

	/**
	 * Complete a single TNA-SL multiplication w/discount and consensus
	 * @param vec The current local vector of the User computing trust
	 * @param matrix The persistent Opinion matrix
	 * @return An updated local trust vector, with +1 path depth information
	 */
	private Opinion[] TNASLMultiply(Opinion[] vec, Opinion[][] matrix){
		Opinion op_holder;
		Opinion[] dest = new Opinion[nw.GLOBALS.NUM_USERS];
		for(int i=0; i < nw.GLOBALS.NUM_USERS; i++){
			for(int j=0; j < nw.GLOBALS.NUM_USERS; j++){
				if(j == 0)
					dest[i] = vec[0].discount(matrix[i][0]);
				else{
					op_holder = vec[j].discount(matrix[i][j]);
					dest[i] = dest[i].consensus(op_holder);
				} // Don't consensus first discount; it isn't monotonic
			} // Inner loop of matrix-vector multiplication
		} // Outer loop of matrix-vector multiplication
		
		boolean max_modified = false;
		for(int i=0; i < nw.GLOBALS.NUM_USERS; i++){
			if(dest[i].expectedValue() > max_vec[i]){
				max_vec[i] = dest[i].expectedValue();
				max_modified = true;
			} // Flag flips if a copy to 'max_vec' is made
		} // Update the 'max_value' vector at each position
		
		if(max_modified)
			return dest;
		else
			return null;
	}
	
}
